# Snippets for nixos and nix in general

priority -10

# Generate a shell.nix boilerplate
snippet shell "shell.nix boilerplate"
{ pkgs ? import <nixpkgs> {} }:
pkgs.mkShell {
	# buildInputs is for dependencies you'd need "at run time",
	# were you to to use nix-build not nix-shell and build whatever you were working on
	buildInputs = [
		pkgs.hello
	];

	shell = pkgs.zsh;
}
endsnippet

# Generate a default.nix boilerplate
snippet default "default.nix boilerplate"
{ pkgs ? import <nixpkgs> {} }:
pkgs.stdenv.mkDerivation rec {
	name = "my-package";
	src = ./.;
	buildInputs = [ pkgs.hello ];
}
endsnippet

# Generate a flake.nix boilerplate
snippet flake "flake.nix boilerplate"
{
  description = "Nix flake";
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
    utils.url = "github:numtide/flake-utils";
  };
  outputs = { nixpkgs, utils, ... }: 
    utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs { inherit system; };
      in {
        # checks = {
        #   fmt = pkgs.runCommand "check-fmt" {} ''
        #     ${lib.getExe formatter} --check ${./.}
        #     touch $out
        #   '';
        # };

        devShells.default = pkgs.mkShell {
          packages = with pkgs; [
            hello
          ];
        };

        packages = {
          default = pkgs.hello;
        };
    });
}
endsnippet

# Generate a nix module boilerplate
snippet module "nix module boilerplate"
{ config, pkgs, lib, ... }:
{
	environment.systemPackages = [
	];
}
endsnippet

## LANGUAGE SPECIFIC SNIPPETS
snippet nodesh "nodejs package shell"
	buildInputs = [ 
		pkgs.nodejs
		(pkgs.yarn.override { nodejs = pkgs.nodejs; })
	];
endsnippet

# Generate a shell.nix boilerplate
snippet javash "java shell.nix boilerplate"
{ pkgs ? import <nixpkgs> {} }:
  pkgs.mkShell {
    buildInputs = [
      pkgs.jdk17
      pkgs.maven
    ];

    shell = pkgs.zsh;

    shellHook = ''
      export JAVA_HOME=${pkgs.jdk17}
      PATH="${pkgs.jdk17}/bin:$PATH"
    '';
  }
endsnippet


# Generate a shell.nix boilerplate
snippet flakeout "flake output"
  outputs = { self, nixpkgs, ... }:
    let
      lib = nixpkgs.lib;
      recursiveMergeAttrs = listOfAttrsets: lib.fold (attrset: acc: lib.recursiveUpdate attrset acc) {} listOfAttrsets;
      systems = [ "x86_64-linux" "aarch64-linux" "x86_64-darwin" "aarch64-darwin" ];

      systemPackages = map (system:
        let
          pkgs = import nixpkgs { inherit system; };
        in
        {
          packages."${system}".funzzy = pkgs.callPackage ./nix/package.nix {};

          devShells."${system}".default = pkgs.mkShell {
            packages = with pkgs; [
              hello
            ];
          };
        }
      ) systems;
    in
      # Reduce the list of packages of packages into a single attribute set
      recursiveMergeAttrs(systemPackages);
endsnippet

# Boiler plate for using npx in nix
snippet npx "npx in nix"
{ pkgs ? import <nixpkgs> {} }:
  pkgs.mkShell {
    buildInputs = [
      (pkgs.writeScriptBin "spectral" ''#!${pkgs.stdenv.shell}
        npx @stoplight/spectral-cli@v6.6.0 "$@"
        '')
    ];


    # Makes npx install and use local cache
    shellHook = ''
      mkdir -p $PWD/.npx-local
      mkdir -p $PWD/.npx-local/lib
      export NODE_PATH=$PWD/.npx-local
      export PATH=$NODE_PATH/bin:$PATH

      npm config set prefix $NODE_PATH
    '';
  }
endsnippet

snippet build_nmpcknpx "build npm package"
{ pkgs, fetchFromGitHub  }: 
  pkgs.buildNpmPackage rec {

    name = "snipgpt";
    version = "0.2.1";

    doBuild = false;

    src = fetchFromGitHub {
      owner = "cristianoliveira";
      repo = "snipgpt";
      rev = "v${version}";
      sha256 = "sha256-3ViFO0drJ6PrEQZECKUIQiMCAEsq12ViTxV7jgPLhMo=";
    };

    npmDepsHash = "sha256-aYJLbGQeH9EthA3zq/olvP0xNZVzvwXtt0Tz7dMQS6U=";

    npmFlags = ["--ignore-scripts"];
  }
endsnippet

snippet mkshell "a default mkShell"
  devShells.default = pkgs.mkShell {
    packages = with pkgs; [
      hello
    ];
  };
endsnippet

snippet shpy "a shell.nix for python"
{ pkgs ? import <nixpkgs> {} }:
  with pkgs; stdenv.mkDerivation rec {
    name = "python-virtualenv-shell";
    env = buildEnv { name = name; paths = buildInputs; };
    buildInputs = [
      python3
      python3Packages.virtualenv
      # It is essential **not** to add `pip` here as
      # it would prevent proper virtualenv creation.
    ];
    shellHook = ''
      # set SOURCE_DATE_EPOCH so that we can use python wheels
      SOURCE_DATE_EPOCH=$(date +%s)

      virtualenv venv

      source venv/bin/activate
    '';
  }
endsnippet

snippet mdl "a default module definition"
{ pkgs ? import <nixpkgs> {}, ... }: {
  environment.systemPackages = with pkgs; [
    hello
    # (pkgs.callPackage ./nix/package.nix {})
  ];

  environment.sessionVariables = {
    GTK_THEME = "Adwaita:dark";
  };

  systemd.services.notifier = {
    enable = true;
    wantedBy = [ "multi-user.target" ];

    serviceConfig = {
      # Link from $HOME/.dotfiles/nix/nixos/services
      ExecStart = "/var/services/notification.sh";
    };

    script = ''
      #!/bin/sh

      echo "Notification service started"
    '';
  };
}
endsnippet

snippet pkg "a default package definition"
{ pkgs ? import <nixpkgs> {}, ... }: {
  environment.systemPackages = with pkgs; [
    hello
    # (pkgs.callPackage ./nix/package.nix {})
  ];

  environment.sessionVariables = {
    GTK_THEME = "Adwaita:dark";
  };

  systemd.services.notifier = {
    enable = true;
    wantedBy = [ "multi-user.target" ];

    serviceConfig = {
      # Link from $HOME/.dotfiles/nix/nixos/services
      ExecStart = "/var/services/notification.sh";
    };

    script = ''
      #!/bin/sh

      echo "Notification service started"
    '';
  };
}
endsnippet

snippet dserv "a docker service package definition"
{ pkgs, ... }: {
  # Custom domains
  # environment.etc."dnsmasq.d/001-default.conf"= let
  #   # Should be defined in your environment
  #   serverIp = builtins.getEnv "SERVER_IP" ? null;
  # in 
  # {
  #   text = ''
  #     address=/loc.lab/127.0.0.1
  #   '';
  # };

  # Ensure Docker is installed and enabled
  virtualisation.docker.enable = true;

  # Add your user to docker group (replace 'username' with your actual username)
  # FIXME: change this to the correct user
  users.users."cris".extraGroups = [ "docker" ];

  # Optional: Disable systemd-resolved to avoid port 53 conflicts
  services.resolved.enable = false;

  virtualisation.oci-containers.containers.pihole = {
    autoStart   = true;
    image       = "pihole/pihole:latest";

    ports       = [
      "53:53/tcp"
      "53:53/udp"
      "8053:80/tcp"
    ];

    environment = {
      TZ                             = "Europe/Berlin";
      # read WEBPASS from your build‐env; you can also hard‑code or use environmentFiles
      FTLCONF_webserver_api_password = builtins.getEnv "WEBPASS";
      FTLCONF_dns_listeningMode      = "all";
    };

    volumes = [
      "/etc/pihole:/etc/pihole"
      "/etc/dnsmasq.d:/etc/dnsmasq.d"
    ];

    extraOptions = [
      "--dns=127.0.0.1"
      "--dns=1.1.1.1"
    ];
  };

  systemd.tmpfiles.rules = [
    "d /var/lib/pihole/etc-pihole 0755 root root"
    "d /var/lib/pihole/etc-dnsmasq.d 0755 root root"
  ];

  ## Cron that updates pihole with 'pihole -g' every day
  systemd.services.pihole-update = {
    description = "Update Pi-hole gravity";
    wantedBy = [ "multi-user.target" ];
    serviceConfig = {
      Type = "oneshot";
      ExecStart = "${pkgs.docker}/bin/docker exec pihole pihole -g";
      RemainAfterExit = true;
    };
  };
  systemd.timers.pihole-update = {
    description = "Timer for Pi-hole gravity update";
    wantedBy = [ "timers.target" ];
    timerConfig = {
      OnCalendar = "daily";
      Persistent = true;
    };
    unitConfig = {
      Requires = "pihole-update.service";
      After = "pihole-update.service";
    };
  };
}
endsnippet

snippet shscbin "shell script bin"
  pkgs.writeShellScriptBin "myscript" ''
    #!${pkgs.stdenv.shell}
    echo "Hello, world!"
  ''; 
endsnippet
