extends javascript

global !p
def upperfirst(t):
	if len(t) < 2:
		return '' if len(t) < 1 else t.capitalize()
	return t[0].capitalize() + t[1:]
def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

# Normal javascript snippets
#
snippet rc "require package that converts from camelCase or PascalCase to kebab-cased" b
const $1 = require("$2`!p snip.rv=lowerdash(t[1])`")
endsnippet

snippet rcn "const { nested } = require('package')" b
const { $1 } = require("$2");
endsnippet

snippet imp "import package that converts from camelCase or PascalCase to kebab-cased" b
import $1 from "$2`!p snip.rv=lowerdash(t[1])`"
endsnippet

snippet impf "import File from './File'" b
import $1 from "${2:./}${3:$1}"
endsnippet

snippet impn "import { nested } from" b
import { $1 } from "$2"
endsnippet

snippet impa "import all from a package that converts from camelCase or PascalCase to kebab-cased" b
import * as $1 from "$2`!p snip.rv=lowerdash(t[1])`"
endsnippet

snippet impp "import file without a declaration" b
import "$1"
endsnippet

snippet icn "import classnames as cn" b
import cn from "classnames"
endsnippet

snippet ism "import scss module" b
import ${2:styles} from "./${1:`!v expand('%:t:r')`}.module.scss"
endsnippet

snippet exp "export { default } from './CurrentFolderName'"
export { default } from "./${1:`!v expand('%:p:h:t')`}"
endsnippet

snippet expf "export File from './File'" b
export $1 from "${2:./}$1"
endsnippet

snippet expn "export nested" b
export { $1 } from "$2"
endsnippet

snippet expd "export { default as File } from './File'" b
export { default as $1 } from "${2:./}$1"
endsnippet

snippet expa "export * from" b
export * from "$1"
endsnippet

snippet cl "console.log" w
console.log($1)
endsnippet

snippet clv "console.log variable" w
console.log("$1:", ${1:})
endsnippet

snippet ce "console.error" w
console.error($1)
endsnippet

snippet cev "console.error variable" w
console.error("$1: ", ${1:})
endsnippet

snippet cw "console.warn" w
console.warn($1)
endsnippet

snippet cwv "console.warn variable" w
console.warn("$1: ", ${1:})
endsnippet

snippet ct "console.table" w
console.table($1)
endsnippet

snippet cd "console.debug" w
console.debug($1)
endsnippet

snippet cdv "console.debug variable" w
console.debug("$1: ", ${1:})
endsnippet

snippet dev "process.env.NODE_ENV !== 'production'" w
process.env.NODE_ENV !== "production"
endsnippet

snippet prod "process.env.NODE_ENV === 'production'" w
process.env.NODE_ENV === "production"
endsnippet

# ==========================================
# Test Snippets
#
snippet rtf "React Test File" b
import { render } from "@testing-library/react"

import { ${1:`!v expand('%:t:r')`} } from "../$1"

describe("$1", () => {
	it("should $2", () => {
		$0
	})
})
endsnippet

snippet tmd "Test module" b
import { ${2:`!v expand('%:t:r')`} } from "../$1"

describe("$2", () => {
	it("$3", () => {
		$0
		expect(false).toBe(true); // TODO: implement test
	})
})
endsnippet

snippet desc "describe a test" b
describe("$1", () => {
	it("should $2", () => {
		$0
	})
})
endsnippet

snippet todo "it.todo()" b
it.todo("should $1")
endsnippet

snippet es "expect(container).toMatchSnapshot()" b
expect(${1:container}).toMatchSnapshot()$0
endsnippet

snippet exe "expect(smth).toEqual()" b
expect(${1:container}).toEqual()$0
endsnippet

snippet intf "create interface for file" b
export interface ${1:`!v expand('%:t:r')`}$2 {
	$0
}
endsnippet

# ==========================================
# React Snippets
#
snippet rce "react class exported" b
import { Component } from "react"

export default class ${1:`!v expand('%:t:r')`} extends Component {
	public render() {
		return ${2:null}$0
	}
}
endsnippet

snippet rcep "react class exported (with prop interface)" b
import { Component } from "react"

export interface $1Props {
}

export default class ${1:`!v expand('%:t:r')`} extends Component<$1Props> {
	public render() {
		return ${2:null}$0
	}
}
endsnippet

snippet rceps "react class exported (with prop and state interfaces)" b
import { Component } from "react"

export interface $1Props {
}

export interface $1State {
}

export default class ${1:`!v expand('%:t:r')`} extends Component<$1Props, $1State> {
	constructor(props: $1Props) {
		super(props)

		this.state = {}
	}

	public render() {
		return ${2:null}$0
	}
}
endsnippet

snippet rcc "React class component" b
class $1 extends Component {
	public render() {
		return null$0
	}
}
endsnippet

snippet rcon "React class constructor" b
constructor(props: ${1:`!v expand('%:t:r')`}Props) {
	super(props)

	this.state = ${1:{}}$0
}
endsnippet

snippet fce "function component export (with prop interface)" b
import type { ReactElement } from "react"

export interface $1Props {
	$3
}

export function ${1:`!v expand('%:t:r')`}(${2:props}: $1Props): ReactElement {
	return ${4:<></>}$0
}
endsnippet

snippet fcde "function component default export (with prop interface)" b
import type { ReactElement } from "react"

export interface $1Props {
	$3
}

export default function ${1:`!v expand('%:t:r')`}(${2:props}: $1Props): ReactElement {
	return ${4:<></>}$0
}
endsnippet

snippet sfce "simple function component export (no prop interface)" b
import type { ReactElement } from "react"

export function ${1:`!v expand('%:t:r')`}(): ReactElement {
	return ${2:<></>}$0
}
endsnippet

snippet sfcde "simple function component default export (no prop interface)" b
import type { ReactElement } from "react"

export default function ${1:`!v expand('%:t:r')`}(): ReactElement {
	return ${2:<></>}$0
}
endsnippet

snippet ffce "forwarded function component export"
import { forwardRef } from "react"

export interface ${1:`!v expand('%:t:r')`}Props {
	$3
}

export const $1 = forwardRef<HTML${2:Div}Element, $1Props>(function $1(props, ref) {
	return (
		<div ref={ref}>$0
		</div>
	)
})
endsnippet

snippet ffcde "forwarded function component default export"
import { forwardRef } from "react"

export interface ${1:`!v expand('%:t:r')`}Props {
	$3
}

export default forwardRef<HTML${2:Div}Element, $1Props>(function $1(props, ref) {
	return (
		<div ref={ref}>$0
		</div>
	)
})
endsnippet

snippet rcf "react class function" b
$1 = (${2:event}) => {
	$3
}
endsnippet

# ==========================================
# Component Specs and Lifecycle Section
#
snippet sdp "static default props" b
public static defaultProps = {
	$2
}
endsnippet

snippet sdpt "static default props (typed)" b
public static defaultProps: DefaultProps = {
	$2
}
endsnippet

snippet cdp "component default props" b
${1:`!v expand('%:t:r')`}.defaultProps = {
	$2
}
endsnippet

snippet cdpt "component default props (typed)" b
const defaultProps: $1DefaultProps = {
	$2
}

${3:`!v expand('%:t:r')`}.defaultProps = defaultProps
endsnippet

snippet spt "static prop types" b
public static propTypes = {
	${1:className}: ${2:PropTypes.string},$0
}
endsnippet

snippet cpt "component prop types" b
${1:`!v expand('%:t:r')`}.propTypes = {
	${2:className}: ${3:PropTypes.string},$0
}
endsnippet

snippet gds "get derived state from props" b
public static getDerivedStateFromProps(nextProps: ${1:`!v expand('%:t:r')`}Props, prevState: $1State) {
	return ${2:null}$0
}
endsnippet

snippet gde "get derived state from props" b
public static getDerivedStateFromError(error: Error) {
	return ${1:null}$0
}
endsnippet

snippet cdm "component did mount" b
public componentDidMount() {
	$1
}
endsnippet

snippet scu "should component update" b
public shouldComponentUpdate(nextProps: ${1:`!v expand('%:t:r')`}Props, nextState: $1State) {
	return ${1:true}$0
}
endsnippet

snippet gsbu "get snapshot before update" b
public getSnapshotBeforeUpdate(prevProps: ${1:`!v expand('%:t:r')`}Props, prevState: $1State) {
	return ${2:null}$0
}
endsnippet

snippet cdu "component did update" b
public componentDidUpdate(prevProps: ${1:`!v expand('%:t:r')`}Props, prevState: $1State, ${2:snapshot: any}) {
	$3
}
endsnippet

snippet cdc "component did catch" b
public componentDidCatch(error: Error, info: ErrorInfo) {
	$1
}
endsnippet

snippet cwum "component will unmount" b
public componentWillUnmount() {
	$1
}
endsnippet

snippet me "MouseEvent<HTMLButtonElement>" w
${1:event: }MouseEvent<HTML${2:Button}Element>$0
endsnippet

snippet te "TouchEvent<HTMLButtonElement>" w
${1:event: }TouchEvent<HTML${2:Button}Element>$0
endsnippet

snippet ke "KeyboardEvent<HTMLElement>" w
${1:event: }KeyboardEvent<HTML$2Element>$0
endsnippet

snippet che "ChangeEvent<HTMLInputElement>" w
${1:event: }ChangeEvent<HTML${2:Input}Element>$0
endsnippet

snippet fe "FocusEvent<HTMLInputElement>" w
${1:event: }FocusEvent<HTML${2:Input}Element>$0
endsnippet

snippet foe "FormEvent<HTMLInputElement>" w
${1:event: }FormEvent<HTML${2:Input}Element>$0
endsnippet

snippet meh "MouseEventHandler<HTMLButtonElement>" w
MouseEventHandler<HTML${1:Button}Element>$0
endsnippet

snippet teh "TouchEventHandler<HTMLButtonElement>" w
TouchEventHandler<HTML${1:Button}Element>$0
endsnippet

snippet keh "KeyboardEventHandler<HTMLElement>" w
KeyboardEventHandler<HTML$1Element>$0
endsnippet

snippet cheh "ChangeEventHandler<HTMLInputElement>" w
ChangeEventHandler<HTML${1:Input}Element>$0
endsnippet

snippet feh "FocusEventHandler<HTMLInputElement>" w
FocusEventHandler<HTML${1:Input}Element>$0
endsnippet

snippet foeh "FormEventHandler<HTMLElement>" w
FormEventHandler<HTMLElement>$0
endsnippet


# ==========================================
# Hooks and effects
#

snippet useS "useState()" b
const [$1, set`!p snip.rv=upperfirst(t[1])`] = useState$3($2)$0
endsnippet

snippet useE "useEffect()" b
useEffect(() => {
	$0
}, [])
endsnippet

snippet useEA "useEffect() async" b
useEffect(() => {
	let cancelled = false

	;(async function ${3:doWork}(): Promise<${4:void}> {
		${1:// async work here}
		if (cancelled) {
			return
		}

		$2
	})()

	return () => {
		cancelled = true
	}
}, [])
endsnippet

snippet useC "useContext()" b
${5:const ${1:context} =} useContext$3($2)$0
endsnippet

snippet useRed "useReducer(reducer, initialState, getInitialState)" b
const [${4:state}, ${5:dispatch}] = useReducer(function reducer(state: $1, action: $2): $1 {
	return state
}, ${3:null})
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback(($2) => {
	$0
}, [])
endsnippet

snippet useM "useMemo(fn, inputs)" b
const ${1:memoized} = useMemo(() => {
	$0
}, [])
endsnippet

snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef$3(${2:null})$0
endsnippet

snippet useI "useImperativeHandle(ref, createHandle, [inputs])" b
useImperativeHandle(${1:ref}, () => ({
	$0
}), [])
endsnippet

snippet useL "useLayoutEffect()" b
useLayoutEffect(() => {
	$0
}, [])
endsnippet

snippet useDV "useDebugValue(value)" b
useDebugValue(${1:null})
endsnippet

snippet useT "useTransition" b
const [${1:isPending}, ${2:startTransition}] = useTransition()
endsnippet

# ==========================================
# "Inline" versions of hooks
#

priority -1
snippet useC "useContext()" w
useContext$2($1)
endsnippet

snippet useCB "useCallback(fn, inputs)" w
useCallback(($1) => {
	$0
}, [])
endsnippet

snippet useM "useMemo(fn, inputs)" w
useMemo(() => {
	$0
}, [])
endsnippet

snippet useR "useRef(defaultValue)" w
useRef$2(${1:null})$0
endsnippet

priority 0


# ==========================================
# Other useful react/redux snippets
#

snippet mc "mirrored const"
const $1 = '$1'
endsnippet

snippet useD "useAppDispatch()" b
const dispatch = useAppDispatch()
endsnippet

snippet useDS "useDispatch()" b
const dispatch${1:: AppDispatch} = useDispatch()
endsnippet

snippet useSL "useSelector(selector)" b
const ${1:value} = useSelector((${2:state${3:: AppState} => $4}))
endsnippet

snippet useAS "useAppSelector(selector)" b
const ${1:value} = useAppSelector(${2:state => $3})
endsnippet

priority -1
snippet useD "useDispatch()" w
useAppDispatch()
endsnippet

snippet useSL "useSelector(state)" w
useSelector((${1:state${2:: AppState} => $3}))
endsnippet

snippet useAS "useAppSelector(state)" w
useAppSelector(${1:state => $2})
endsnippet

priority 0

# ==========================================
# redux toolkit snippets
#

snippet cs "createSlice()" b
const { actions, reducer } = createSlice({
	name: "${1:`!v expand('%:t:r')`}",
	initialState: $2,
	reducers: {
		$0
	}
})
endsnippet

snippet ecs "export createSlice()" b
import { createSlice } from "@reduxjs/toolkit"

const { actions, reducer } = createSlice({
	name: "${1:`!v expand('%:t:r')`}",
	initialState: $2,
	reducers: {
		$3: (state) => state,
	}
})

export const { $3 } = actions

export default reducer
endsnippet

snippet cpr "create prepare reducer" b
$1: {
	reducer(state, action: ${2:PayloadAction}<$3>) {
		$0
	},
	prepare($4) {
		return { payload: { $5 } }
	}
}
endsnippet

snippet cat "create async thunk" b
export const $1 = createAsyncThunk("$2$1", async ($3) => {
	$0
})
endsnippet

priority -1

snippet cat "create async thunk (inline)" w
createAsyncThunk("$1", async ($2) => {
	$0
})
endsnippet

priority 0

# ==========================================
# General Built-Ins
#

snippet re "reduce<Type>" w
reduce<$1>((${2:result}, ${3:value}) => {
	$0

	return $2
}, ${4:{}})
endsnippet

snippet /** "jsdoc comment with params, return and example" b
/**
 * $0
 *
 * @param ${1:arg} ${2:description}
 * @returns ${3:description}
 *
 * @example
 * $4
 */
endsnippet

snippet /**! "jsdoc comment with params, return and example and throw" b
/**
 * $0
 *
 * @param ${1:arg} ${2:description}
 * @returns ${3:description}
 * @throws ${4:description}
 *
 * @example
 * $5
 */
endsnippet


## Jest
snippet ee "expect to equal (js)"
expect(${1:target}).toEqual(${2:value});
endsnippet

snippet et "expect to be truthy (js)"
expect(${1:target}).toBeTruthy();
endsnippet

snippet ef "expect to be falsy (js)"
expect(${1:target}).toBeFalsy();
endsnippet

snippet eth "expect to throw (js)"
expect(${1:target}).toThrow(${2:value});
endsnippet

snippet etbd "expect to be in the document (js-dom)"
expect(${1:target}).toBeInTheDocument();
endsnippet

snippet eobjc "expect to be in the document (js-dom)"
expect.objectContaining(${1:target})
endsnippet
