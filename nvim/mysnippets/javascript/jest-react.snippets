snippet impr "Import react (js)"
	import React from 'react'; $0
endsnippet

snippet imps "Import shallow enzyme (js)"
	import { shallow } from 'enzyme'; $0
endsnippet

snippet impm "Import mount enzyme (js)"
	import { mount } from 'enzyme'; $0
endsnippet

snippet imrt "Import render from testing library (js)"
	import { render } from 'testing-library'; $0
endsnippet

snippet impp "Import proptypes (js)"
	import PropTypes from 'prop-types'; $0
endsnippet

snippet tsha "shallow test (js)"
const props = {};

const component = shallow(<${1:component} {...props}/>)
expect(component).toEqual('')
endsnippet

snippet tmou "mount test (js)"
const props = {};

const component = mount(<${1:component} {...props}/>)

expect(component).toEqual('')
endsnippet

snippet tren "render testing (js)"
const props = {...defaultProps};

const wrapper = render(<${1:component} {...props}/>)

expect(wrapper).toEqual('')
endsnippet

snippet trc "test react component (js)"
import React from 'react';
import { describe, expect, it } from 'vitest';
import { render, screen } from '@testing-library/react';

import { $1 } from './${2:$1}';

describe('${3:$1}', () => {
	const defaultProps = {};

	it('$4', () => {
		const props = {...defaultProps};

		render(<${5:$1} {...props}/>)

    expect(screen.getByText('Pick an option')).toBeInTheDocument();
    expect(screen.getByLabel('Date')).toBeInTheDocument();
	});
});
endsnippet

snippet tgc "test generic component (js)"
import { describe, expect, it } from 'vitest';
import { render, screen } from '@testing-library/react';

import $1 from './${2:$1}';

describe('${3:$1}', () => {
	const defaultprops = {};

	it('$4', () => {
		const props = {...defaultprops};

		render(<${5:$1} {...props}/>)

    expect(screen.getByText('Pick an option')).toBeInTheDocument();
	});
});
endsnippet

snippet wfgt "wrapper get by text"
	wrapper.getByText('${0}')
endsnippet

snippet wfglt "wrapper get by label text"
	wrapper.getByLabelText('${0}')
endsnippet

snippet rspr "render and spread result"
	const { container, getByText, getBy } = render(<${0} />)
endsnippet

snippet cfds "component find data-selector"
	component.find('[data-selector="${0}"]')
endsnippet

snippet cffm "component find field name"
	component.find('[name="${0}"]')
endsnippet
