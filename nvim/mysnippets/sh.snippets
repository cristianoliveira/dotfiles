#######################################################################
#                           Bash Snippets                             #
#######################################################################

priority -50

# Define a simple function
snippet #! "bash shebang"
#!/usr/bin/env bash
endsnippet

# Define a simple function
snippet fn "function name() {}"
function ${1:function_name}() {
    ${VISUAL}$0
}
endsnippet

# Define a function with parameters
snippet fnp "function name(param1, param2, ...) {}"
function ${1:function_name}() {
    local ${2:param1}=$1
    local ${3:param2}=$2
    ${VISUAL}$0
}
endsnippet

# If statement
snippet if "if [ condition ]; then ... fi"
if [ ${1:condition} ]; then
    ${VISUAL}$0
fi
endsnippet

# For loop
snippet for "for i in {start..end}; do ... done"
for i in {${1:start}..${2:end}}; do
    ${VISUAL}$0
done
endsnippet

# While loop
snippet while "while [ condition ]; do ... done"
while [ ${1:condition} ]; do
    ${VISUAL}$0
done
endsnippet

# Case statement
snippet case "case variable in ... esac"
case ${1:variable} in
    ${2:pattern1})
        ${VISUAL}$0
        ;;
    ${3:pattern2})
        ${4:action}
        ;;
    *)
        ${5:default_action}
        ;;
esac
endsnippet

# If not (negation)
snippet ifnot "if not conditioon"
if ! [ ${1:condition} ]; then
    ${VISUAL}$0
fi
endsnippet

# If variable is not empty
snippet ifne "if not empty"
if [ -n "${1:variable}" ]; then
    ${VISUAL}$0
fi
endsnippet

# If file is not present
snippet ifnp "if file not present"
if [ ! -f "${1:filename}" ]; then
    ${VISUAL}$0
fi
endsnippet

# Echo with a message
snippet echo "echo 'message'"
echo "${1:message}"
endsnippet

# Echo with a message
snippet cll "bad habits"
echo "@@@@ $1 - $${1:message}"
endsnippet

# Echo with a message
snippet template "cli boilerplate"
set -e # fail on error
set -u # do not allow unset variables

USAGE="
This is a small script to simplify the way we create test checkouts

USAGE:
  ${0} [amount] [pay_to_email]
  ex:
  ${0} 50 myuser@sumup.com

ARGUMENTS:
  [amount]: The amount for creating the checkout (DEFAULT: 100,00)
  [pay_to_email]: Required by the api. Use your account email on ze-dashboard

ENV VARIABLE:
  [API_URL] Set the api url (DEFAULT: https://api-theta.sam-app.ro)

CMD = ${1:-$USAGE}
"
endsnippet

# Git pre-push hook
snippet gph "git pre-push hook"
#!/usr/bin/env bash
set -euo pipefail

echo "üîç Checking for pushable changes..."

# Determine the range of commits being pushed
remote="$1"
url="$2"
read local_ref local_sha remote_ref remote_sha

# Only push if there are changes
if [ "$local_sha" = "$remote_sha" ]; then
  echo "‚úÖ Nothing to push (no changes). Skipping checks."
  exit 0
fi

echo "üîç Running checks before push..."

# Run linter
echo "üì¶ Running linter..."
if ! make lint; then
  echo "‚ùå Lint failed. Fix issues before pushing."
  exit 1
fi

# Run tests
echo "üß™ Running tests..."
if ! make test; then
  echo "‚ùå Tests failed. Fix issues before pushing."
  exit 1
fi

# Check for WIP commits in push range
echo "üîç Checking for WIP commits..."
if git log "$remote_sha..$local_sha" --oneline | grep -i 'WIP'; then
  echo "‚ùå Push blocked: WIP commits found in push range."
  exit 1
fi

echo "‚úÖ All checks passed. Ready to push!"
exit 0
endsnippet

