# set your user tokens as environment variables, such as ~/.secrets
# See the README for examples.
[color]
  ui = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red
  new = green
[alias]
  # add
  a = add                           # add
  chunkyadd = add --patch           # stage commits chunk by chunk

  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # branch
  b = branch -v                     # branch (verbose)
  bls = branch --list --format='%(refname:short)'

  # branches that can be deleted
  bmd = !git branch --merged | grep -v "\\*\\|$MAIN_BRANCH\\|dev"
  bmdd = !git branch --merged | grep -v "\\*\\|$MAIN_BRANCH\\|dev" | xargs -n 1 git branch -d

  # commit
  c = commit -m                     # commit with message
  ca = commit -am                   # commit all with message
  ci = commit                       # commit
  cm = commit                       # commit
  amd = commit --amend              # ammend your last commit
  amdf = commit --amend --no-edit   # ammend your last commit without editing the message
  amend = commit --amend            # ammend your last commit
  ammend = commit --amend           # ammend your last commit

  # checkout
  ch = checkout                      # checkout
  co = checkout                      # checkout
  nb = checkout -b                   # create and switch to a new branch (mnemonic: "git new branch branchname...")
  chb = checkout -b                  # create and switch to a new branch
  chm = !git checkout "$MAIN_BRANCH" # checkout main branch
  chd = !git checkout develop
  chs = !git checkout stage

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch
  cpsp = cherry-pick --skip         # skip a commit during cherry-pick
  cpab = cherry-pick --abort        # abort a cherry-pick
  cpc = cherry-pick --continue      # continue a cherry-pick

  # diff
  d = difftool
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change

  # git clean
  cln = clean
  clnf = clean -df                  # clean all untracked files and directories

  # log
  l = log --graph --date=short
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  simple = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
  follow = log --follow
  # Format to be easily 'pipeable' with commit hash on the first position
  lgp = log --no-merges --pretty=format:"%h %s (%cn) %cr"

  # pull
  pl = pull                         # pull

  fa = fetch --all                  # fetch all remotes

  # push
  ps = push                         # push
  psf = push --force-with-lease     # push with force-with-lease
  psff = push --force-with-lease --no-verify     # push with force-with-lease no-verify
  pf = push --force-with-lease      # similar to my old alias

  # rebase
  rbs = rebase
  rbsc = rebase --continue            # continue rebase
  rbss = rebase --skip                # skip rebase
  rbsa = rebase --abort
  rbom = !git rebase "origin/$MAIN_BRANCH"   # rebase on origin main branch
  rbsom = !git rebase "origin/$MAIN_BRANCH"   # rebase on origin main branch

  # remote
  r = remote -v                     # show remotes (verbose)

  # reset
  rs = reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool
  rshom = !git reset --hard origin/"$MAIN_BRANCH" # reset to origin main branch

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status
  st = status                       # status
  stat = status                     # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  list =  diff-tree --no-commit-id --name-only -r

  # svn helpers
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit

  wip = !git add . && git commit -m WIP

  # worktree add branch
  wab = worktree add
  # delete branch
  wrb = worktree remove
  wdb = worktree remove

  # Bisec commands
  #
  # USAGE:
  # Start the bisect with `g bss`
  # Mark the commit as bad with `g bsb` (usually the HEAD)
  # Then mark the commit as good with `g bsg`
  # The bisect command is a binary search command that helps you find the commit that introduced a bug.
  bss = bisect start

  bsb = bisect bad
  bsbad = bisect bad

  bsg = bisect good
  bsgood = bisect good
[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[merge]
  summary = true
  verbosity = 1
  tool = vimdiff
[mergetool]
  prompt = false
  keepBackup = false
[mergetool "vimdiff"]
  cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
[apply]
  whitespace = nowarn
[branch]
  autosetupmerge = true
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = current
  autoSetupRemote = true
[core]
  autocrlf = false
  editor = nvim
  excludesfile = ~/.gitignore
  pager = diff-so-fancy | less --tabs=4 -RFX
[advice]
  statusHints = false
  # Ignore advice about skipped cherry-picks
  # git config advice.skippedCherryPicks false
  submoduleUpdate = false
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true
[include]
  path = ~/.gitconfig.user
[pull]
  rebase = true
[difftool]
  prompt = false
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[init]
  defaultBranch = main
